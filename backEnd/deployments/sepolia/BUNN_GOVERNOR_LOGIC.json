{
  "address": "0x8a4d0977aef8b7b7ad0441d59692aa2082e3910f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MathOverflowedMulDiv",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "topic_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "implemented",
          "type": "bool"
        }
      ],
      "name": "decision_implemented",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "new_Admin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "new_member",
          "type": "address"
        }
      ],
      "name": "new_member",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "topic",
          "type": "string"
        }
      ],
      "name": "proposal_made",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "demotedAdmin",
          "type": "address"
        }
      ],
      "name": "remove_Admin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "topic_acted_on",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "position",
          "type": "bool"
        }
      ],
      "name": "vote_cast",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "Members",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "belongs",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Topics",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "details",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "implementation_contract_address",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "signature",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "start_time",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "cancelled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "admin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "is_admin",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "removers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "adders",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ballots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "Topic_ID",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "position",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "voting_power",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "topic_id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "position_",
          "type": "bool"
        }
      ],
      "name": "cast_vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "topic_id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_override",
          "type": "bool"
        }
      ],
      "name": "implement_decision",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation_delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "details_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "implementation_contract_address_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "signature_",
          "type": "string"
        }
      ],
      "name": "initiate_topic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "logic_contract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "comparison",
          "type": "uint256"
        }
      ],
      "name": "quorum",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "demotedAdmin",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utility_token_address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "for_votes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "against_votes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voting_duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf9e78cfe0663f3f0bdb5a64789afea4f0077feb650ed823dcc4d8f83ed06c5fe",
  "receipt": {
    "to": null,
    "from": "0x49f2451abee35b261bb01f9d0cdc49f8f8df6e3f",
    "contractAddress": "0x8a4d0977aef8b7b7ad0441d59692aa2082e3910f",
    "transactionIndex": "0x4e",
    "gasUsed": "0x24ba3c",
    "logsBloom": "0x
    "blockHash": "0xbfdf8f1b6583ff8d73e2ed0a47f5a307c6de8330a8528d78c9746547d7645dff",
    "transactionHash": "0xf9e78cfe0663f3f0bdb5a64789afea4f0077feb650ed823dcc4d8f83ed06c5fe",
    "logs": [],
    "blockNumber": "0x4ce7c4",
    "cumulativeGasUsed": "0xe256ea",
    "status": "0x1"
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "89267af6ce86f7bc1c826cf0c5ed418a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topic_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"implemented\",\"type\":\"bool\"}],\"name\":\"decision_implemented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"new_Admin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"new_member\",\"type\":\"address\"}],\"name\":\"new_member\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"topic\",\"type\":\"string\"}],\"name\":\"proposal_made\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"demotedAdmin\",\"type\":\"address\"}],\"name\":\"remove_Admin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topic_acted_on\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"position\",\"type\":\"bool\"}],\"name\":\"vote_cast\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Members\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"belongs\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Topics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation_contract_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"start_time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"is_admin\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"removers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adders\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ballots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Topic_ID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"position\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"voting_power\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"topic_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"position_\",\"type\":\"bool\"}],\"name\":\"cast_vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"topic_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_override\",\"type\":\"bool\"}],\"name\":\"implement_decision\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation_delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"details_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation_contract_address_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"signature_\",\"type\":\"string\"}],\"name\":\"initiate_topic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logic_contract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"comparison\",\"type\":\"uint256\"}],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"demotedAdmin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utility_token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"for_votes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"against_votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voting_duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BUNN_Logic.sol\":\"BUNN_GOVERNOR_LOGIC\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/BUNN_Logic.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"./restrictions.sol\\\";\\nimport \\\"./utility_token-interface.sol\\\";\\nimport \\\"./governor_storage.sol\\\";\\n\\ncontract BUNN_GOVERNOR_LOGIC is governor_storage, Restrictions {\\n    /* *************************\\n    Section B: Events\\n    \\n    **************************/\\n    event decision_implemented(string title, uint topic_id, bool implemented);\\n    event vote_cast(\\n        address indexed participant,\\n        uint topic_acted_on,\\n        bool position\\n    );\\n    event proposal_made(address indexed proposer, string topic);\\n    event new_member(address indexed new_member);\\n    event new_Admin(address indexed newAdmin);\\n    event remove_Admin(address indexed demotedAdmin);\\n\\n    /* ************************* */\\n    constructor() {}\\n\\n    /*************************\\n    Section C: Functions\\n    *************************/\\n\\n    function register(string memory name_ /* , uint256 d_tokens */) public {\\n        Members[msg.sender] = Member({\\n            name: name_,\\n            belongs: true /* ,\\n            delegated_tokens: d_tokens */\\n        });\\n        emit new_member(msg.sender);\\n    }\\n\\n    // A qualified user initiates a TOPIC/PROPOSAL\\n    function initiate_topic(\\n        string memory title_,\\n        string memory details_,\\n        address implementation_contract_address_,\\n        string memory signature_\\n    ) public {\\n        /* sanity checks */\\n        require(Members[msg.sender].belongs, \\\"NOT A MEMBER\\\");\\n\\n        Topic memory new_topic = Topic({\\n            id: counter,\\n            title: title_,\\n            initiator: msg.sender,\\n            details: details_,\\n            implementation_contract_address: implementation_contract_address_,\\n            signature: signature_,\\n            start_time: block.timestamp,\\n            executed: false,\\n            cancelled: false\\n        });\\n\\n        // require(Topics[new_topic.id], \\\"FAILED TO INITIATE TOPIC\\\");\\n\\n        Topics[new_topic.id] = new_topic;\\n\\n        counter = counter + 1;\\n        emit proposal_made(msg.sender, new_topic.title);\\n    }\\n\\n    // A qualified user casts their vote(s)\\n    function cast_vote(uint256 topic_id, bool position_) public {\\n        // Topic memory topic = Topics[topic_id];\\n        // IUTILITY_TOKEN BUNN = IUTILITY_TOKEN(utility_token_address);\\n        // /*sanity checks*/\\n        // // check if the Topic is cancelled\\n        // require(!topic.cancelled, \\\"INVALID VOTE. TOPIC IS CANCELLED\\\");\\n        // // check if sender is a registered user\\n        // require(Members[msg.sender].belongs, \\\"NOT A MEMBER\\\");\\n        // // check if the voting period has expired\\n        // uint256 end_time = voting_duration + topic.start_time;\\n        // require(end_time > block.timestamp, \\\"VOTING PERIOD HAS ELAPSED\\\");\\n        // // ensure that the voter has enough tokens\\n        // require(\\n        //     BUNN.balanceOf(msg.sender) > 0,\\n        //     \\\"YOU MUST POSSES TOKENs TO BE AN ELIGIBLE VOTER\\\"\\n        // );\\n        // // map users vote against the topic they voted for\\n        // // it is supposed to track users who participated in the decision\\n        // require(!ballots[msg.sender][topic_id].voted, \\\"MEMBERS CAN ONLY CAST A VOTE PER TOPIC\\\");\\n        // ballots[msg.sender][topic_id] = ballot({\\n        //     Topic_ID: topic_id,\\n        //     position: position_,\\n        //     voted: true\\n        // });\\n        // if (ballots[msg.sender][topic_id].position) {\\n        //     votes[topic_id].for_votes = votes[topic_id].for_votes + 1;\\n        // }else {\\n        //     votes[topic_id].against_votes = votes[topic_id].against_votes + 1;\\n        // }\\n        // emit vote_cast(msg.sender, topic.id, position_);\\n    }\\n\\n    // execute/implement a decision or topic is it passed the voting process\\n    function implement_decision(\\n        uint256 topic_id,\\n        bool _override\\n    ) public payable onlyAdmin {\\n        Topic memory topic_to_implement;\\n        address implementation_contract;\\n        string memory signature;\\n\\n        uint256 total_votes = votes[topic_id].for_votes +\\n            votes[topic_id].against_votes;\\n        uint256 end_time = voting_duration + topic_to_implement.start_time;\\n        topic_to_implement = Topics[topic_id];\\n        implementation_contract = topic_to_implement\\n            .implementation_contract_address;\\n        signature = topic_to_implement.signature;\\n\\n        /* sanity checks */\\n        // check if voting is still in progress\\n        if (_override) {\\n            //\\n        } else {\\n            require(\\n                end_time > block.timestamp,\\n                \\\"CANNOT IMPLEMENT BECAUSE VOTING IS STILL IN PROGRESS\\\"\\n            );\\n        }\\n        //check the quorum\\n        require(\\n            quorum(votes[topic_id].for_votes, total_votes),\\n            \\\"THRESHOLD NOT EXCEEDED\\\"\\n        );\\n        // check that the topic has not been cancelled\\n        require(!topic_to_implement.cancelled, \\\"THIS TOPIC IS CANCELLED\\\");\\n        // topic can only be implemented once\\n        require(\\n            !topic_to_implement.executed,\\n            \\\"TOPIC CAN ONLY BE IMPLEMENTED ONCE\\\"\\n        );\\n        // implement topic\\n        (bool success, bytes memory returned_data) = implementation_contract\\n            .call{value: msg.value}(abi.encodeWithSignature(signature));\\n        // confirm successful implementation\\n        require(success, \\\"FAILED TO IMPLEMENT\\\");\\n        mark_as_executed(topic_id);\\n        // emit respective event\\n        emit decision_implemented(topic_to_implement.title, topic_id, success);\\n        returned = abi.decode(returned_data, (uint256));\\n    }\\n\\n    function mark_as_executed(uint256 topic_id) private {\\n        Topics[topic_id].executed = true;\\n    }\\n\\n    /*************************\\n    Section D: Maintenance/Upgrade\\n    *************************/\\n\\n    modifier onlyAdmin() {\\n        require(admin[msg.sender].is_admin, \\\"ACCESS DENIED!\\\");\\n        _;\\n    }\\n\\n    function addAdmin(address newAdmin) public onlyAdmin {\\n        if (admin[newAdmin].adders >= admins.length) {\\n            admin[newAdmin].is_admin = true;\\n            admins.push(newAdmin);\\n            admin[newAdmin].adders = admin[newAdmin].adders + 1;\\n        } else {\\n            admin[newAdmin].adders = admin[newAdmin].adders + 1;\\n        }\\n\\n        emit new_Admin(newAdmin);\\n    }\\n\\n    function removeAdmin(address demotedAdmin) public onlyAdmin {\\n        // require(admin[demotedAdmin].removers > (admins.length/2), \\\"\\\");\\n        if (admin[demotedAdmin].removers >= admins.length - 1) {\\n            admin[demotedAdmin].is_admin = false;\\n            admin[demotedAdmin].removers = admin[demotedAdmin].removers + 1;\\n        } else {\\n            admin[demotedAdmin].removers = admin[demotedAdmin].removers + 1;\\n        }\\n\\n        emit remove_Admin(demotedAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0x88641aebf7827c1df335ea9c5826314f48a73c4a93cbbadb9f866965a9f23194\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/governor_storage.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ncontract governor_storage {\\n    /**************************\\n    Section 0: External resources \\n\\n    *************************/\\n    address public utility_token_address;\\n    uint256 public returned;\\n    address public logic_contract;\\n\\n    /**************************\\n    Section A: State Variables \\n    **************************/\\n\\n    /*\\n    Section A1: defines how members are represented.\\n\\n    ***MORE DELEGATIONS ON THIS LATER***\\n    A member is represented as `Member`.\\n    `Members` maps their address to `Member`.\\n\\n    Members are recorded when they vote, `cast_vote`. \\n    */\\n    struct admin_ {\\n        bool is_admin;\\n        uint256 removers;\\n        uint256 adders;\\n    }\\n    mapping(address => admin_) public admin;\\n\\n    address[] internal admins;\\n\\n    struct Member {\\n        string name; // if necessary\\n        bool belongs;\\n        /* uint delegated_tokens;*/ // if necessary\\n        // other attributes\\n    }\\n    mapping(address => Member) public Members;\\n\\n    /* \\n    Section A2: defines the voting structure.\\n\\n    it features a \\\"ballot box\\\" represented as a mapping called `votes`.\\n    `votes` maps last votes to `ballot`. the last vote is the sum of all votes.\\n    `ballot` maps voters' address to their \\\"ballot paper\\\".\\n\\n    Members can cast their vote(s) by calling the `cast_vote` function.\\n    */\\n    struct ballot {\\n        uint256 Topic_ID;\\n        bool position;\\n        bool voted;\\n        uint256 voting_power;\\n    }\\n    mapping(address => mapping(uint => ballot)) public ballots;\\n\\n    struct vote {\\n        uint256 for_votes;\\n        uint256 against_votes;\\n    }\\n    mapping(uint => vote) public votes;\\n\\n    /*\\n    Section A3a: defines how \\\"Topics\\\" of \\\"Proposals\\\" is represented.\\n\\n    `Topic` defines species the required attributes (self-explanatory) of a topic.\\n    `Topics` is supposed to track \\\"Topics\\\" according to their respective ID(uint).\\n\\n    Qualified members initiate their \\\"Topic\\\" by calling the `initiate_topic` function.\\n     */\\n    struct Topic {\\n        uint256 id;\\n        string title;\\n        address initiator;\\n        string details;\\n        address implementation_contract_address;\\n        string signature;\\n        uint256 start_time;\\n        bool executed;\\n        bool cancelled;\\n    }\\n    mapping(uint256 => Topic) public Topics;\\n\\n    uint256 public counter = 1;\\n}\\n\",\"keccak256\":\"0x8883154ca46108ed01e17c842189b7acab7b5261ecb1b0f4582753b304c7c7e9\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/restrictions.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/* \\n    specifies time-locks and thresholds\\n    */\\ncontract Restrictions {\\n    using Math for uint256;\\n\\n    uint256 public voting_duration = 432000; // 5days\\n    uint256 public implementation_delay = 86400; // 1 day\\n\\n    // uint256 private quorum = 50%;\\n    constructor() {}\\n\\n    /* \\n    here, `target` means the quantity whose threshold is being validated.\\n    `comparison` is the represents the quantity `target` is being validated with.\\n    it returns a boolean if the quorum is high enough.\\n\\n    the quorum I have chosen is 60%.\\n    */\\n    function quorum(\\n        uint256 target,\\n        uint256 comparison\\n    ) public pure returns (bool) {\\n        uint256 comp = comparison.mulDiv(60, 100);\\n        return target >= comp ? true : false;\\n    }\\n}\\n\",\"keccak256\":\"0x713ca8cf0b8fdeab3695926ae4d09e2c05b7bc07e352247315d0d8d8c85f70b2\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility_token-interface.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface IUTILITY_TOKEN {\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc5a78d15c019998fb901c9dd09078579a73825eaf752340a6c5fddf312d687e6\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "MathOverflowedMulDiv()": [
        {
          "details": "Muldiv operation overflow."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2807,
        "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
        "label": "utility_token_address",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2809,
        "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
        "label": "returned",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2811,
        "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
        "label": "logic_contract",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2823,
        "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
        "label": "admin",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(admin_)2818_storage)"
      },
      {
        "astId": 2826,
        "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
        "label": "admins",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2836,
        "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
        "label": "Members",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Member)2831_storage)"
      },
      {
        "astId": 2852,
        "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
        "label": "ballots",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(ballot)2845_storage))"
      },
      {
        "astId": 2862,
        "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
        "label": "votes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(vote)2857_storage)"
      },
      {
        "astId": 2886,
        "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
        "label": "Topics",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Topic)2881_storage)"
      },
      {
        "astId": 2889,
        "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
        "label": "counter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2899,
        "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
        "label": "voting_duration",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2902,
        "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
        "label": "implementation_delay",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(ballot)2845_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct governor_storage.ballot))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ballot)2845_storage)"
      },
      "t_mapping(t_address,t_struct(Member)2831_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct governor_storage.Member)",
        "numberOfBytes": "32",
        "value": "t_struct(Member)2831_storage"
      },
      "t_mapping(t_address,t_struct(admin_)2818_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct governor_storage.admin_)",
        "numberOfBytes": "32",
        "value": "t_struct(admin_)2818_storage"
      },
      "t_mapping(t_uint256,t_struct(Topic)2881_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct governor_storage.Topic)",
        "numberOfBytes": "32",
        "value": "t_struct(Topic)2881_storage"
      },
      "t_mapping(t_uint256,t_struct(ballot)2845_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct governor_storage.ballot)",
        "numberOfBytes": "32",
        "value": "t_struct(ballot)2845_storage"
      },
      "t_mapping(t_uint256,t_struct(vote)2857_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct governor_storage.vote)",
        "numberOfBytes": "32",
        "value": "t_struct(vote)2857_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Member)2831_storage": {
        "encoding": "inplace",
        "label": "struct governor_storage.Member",
        "members": [
          {
            "astId": 2828,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2830,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "belongs",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Topic)2881_storage": {
        "encoding": "inplace",
        "label": "struct governor_storage.Topic",
        "members": [
          {
            "astId": 2864,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2866,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2868,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "initiator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2870,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "details",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2872,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "implementation_contract_address",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2874,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "signature",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 2876,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "start_time",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2878,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "executed",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 2880,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "cancelled",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(admin_)2818_storage": {
        "encoding": "inplace",
        "label": "struct governor_storage.admin_",
        "members": [
          {
            "astId": 2813,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "is_admin",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2815,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "removers",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2817,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "adders",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ballot)2845_storage": {
        "encoding": "inplace",
        "label": "struct governor_storage.ballot",
        "members": [
          {
            "astId": 2838,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "Topic_ID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2840,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "position",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2842,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "voted",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2844,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "voting_power",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(vote)2857_storage": {
        "encoding": "inplace",
        "label": "struct governor_storage.vote",
        "members": [
          {
            "astId": 2854,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "for_votes",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2856,
            "contract": "contracts/BUNN_Logic.sol:BUNN_GOVERNOR_LOGIC",
            "label": "against_votes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}