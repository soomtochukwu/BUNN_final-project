{
  "address": "0x18DD2b2b195565209aF92F123639fae323e31AEB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "utility_token_address_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "upgraded_logic_contract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MathOverflowedMulDiv",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "topic_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "implemented",
          "type": "bool"
        }
      ],
      "name": "decision_implemented",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "new_Admin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "new_member",
          "type": "address"
        }
      ],
      "name": "new_member",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "topic",
          "type": "string"
        }
      ],
      "name": "proposal_made",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "demotedAdmin",
          "type": "address"
        }
      ],
      "name": "remove_Admin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "topic_acted_on",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "position",
          "type": "bool"
        }
      ],
      "name": "vote_cast",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "Members",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "belongs",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Topics",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "details",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "implementation_contract_address",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "signature",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "start_time",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "cancelled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "upgraded_logic_contract",
          "type": "address"
        }
      ],
      "name": "UPGRADE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "upgraded_utility_token",
          "type": "address"
        }
      ],
      "name": "UPGRADE_UTA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "admin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "is_admin",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "removers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "adders",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ballots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "Topic_ID",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "position",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "voting_power",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "topic_id",
          "type": "uint256"
        }
      ],
      "name": "cancel_Topic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "topic_id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "position_",
          "type": "bool"
        }
      ],
      "name": "cast_vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "topic_id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_override",
          "type": "bool"
        }
      ],
      "name": "implement_decision",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation_delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "details_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "implementation_contract_address_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "signature_",
          "type": "string"
        }
      ],
      "name": "initiate_topic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "logic_contract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "comparison",
          "type": "uint256"
        }
      ],
      "name": "quorum",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "demotedAdmin",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utility_token_address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "for_votes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "against_votes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voting_duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x95956165826772b766748a792410b4652b029a00412626b0cf42f763f0c2bd55",
  "receipt": {
    "to": null,
    "from": "0x49f2451AbEe35B261bB01f9d0CDC49f8f8df6E3f",
    "contractAddress": "0x18DD2b2b195565209aF92F123639fae323e31AEB",
    "transactionIndex": 90,
    "gasUsed": "2659919",
    "logsBloom": "0x
    "blockHash": "0x9f2cf909e0406264bc6f18e88921e63fd07cec3f2110fc14adcb9b439defcf87",
    "transactionHash": "0x95956165826772b766748a792410b4652b029a00412626b0cf42f763f0c2bd55",
    "logs": [],
    "blockNumber": 5040075,
    "cumulativeGasUsed": "18744355",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA92CBB9380f9311D876477Fa78Ad1e00f61A858f",
    "0x8a4d0977aef8b7b7ad0441d59692aa2082e3910f"
  ],
  "numDeployments": 8,
  "solcInputHash": "89267af6ce86f7bc1c826cf0c5ed418a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"utility_token_address_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"upgraded_logic_contract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topic_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"implemented\",\"type\":\"bool\"}],\"name\":\"decision_implemented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"new_Admin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"new_member\",\"type\":\"address\"}],\"name\":\"new_member\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"topic\",\"type\":\"string\"}],\"name\":\"proposal_made\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"demotedAdmin\",\"type\":\"address\"}],\"name\":\"remove_Admin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topic_acted_on\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"position\",\"type\":\"bool\"}],\"name\":\"vote_cast\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Members\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"belongs\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Topics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation_contract_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"start_time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"upgraded_logic_contract\",\"type\":\"address\"}],\"name\":\"UPGRADE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"upgraded_utility_token\",\"type\":\"address\"}],\"name\":\"UPGRADE_UTA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"is_admin\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"removers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adders\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ballots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Topic_ID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"position\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"voting_power\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"topic_id\",\"type\":\"uint256\"}],\"name\":\"cancel_Topic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"topic_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"position_\",\"type\":\"bool\"}],\"name\":\"cast_vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"topic_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_override\",\"type\":\"bool\"}],\"name\":\"implement_decision\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation_delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"details_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation_contract_address_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"signature_\",\"type\":\"string\"}],\"name\":\"initiate_topic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logic_contract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"comparison\",\"type\":\"uint256\"}],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"demotedAdmin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utility_token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"for_votes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"against_votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voting_duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BUNN_Governor_Proxy.sol\":\"BUNN_GOVERNOR\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/BUNN_Governor_Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"./restrictions.sol\\\";\\nimport \\\"./utility_token-interface.sol\\\";\\nimport \\\"./governor_storage.sol\\\";\\n\\ncontract BUNN_GOVERNOR is governor_storage, Restrictions {\\n    /* *************************\\n    Section B: Events\\n    \\n    **************************/\\n    event decision_implemented(string title, uint topic_id, bool implemented);\\n    event vote_cast(\\n        address indexed participant,\\n        uint topic_acted_on,\\n        bool position\\n    );\\n\\n    event proposal_made(address indexed proposer, string topic);\\n    event new_member(address indexed new_member);\\n    event new_Admin(address indexed newAdmin);\\n    event remove_Admin(address indexed demotedAdmin);\\n\\n    /* ************************* */\\n    constructor(\\n        address utility_token_address_,\\n        address upgraded_logic_contract\\n    ) {\\n        utility_token_address = utility_token_address_;\\n        admin[msg.sender].is_admin = true;\\n        logic_contract = upgraded_logic_contract;\\n    }\\n\\n    /*************************\\n    Section C: Functions\\n    *************************/\\n\\n    function register(string memory name_ /* , uint256 d_tokens */) public {\\n        (bool success, ) = logic_contract.delegatecall(\\n            abi.encodeWithSignature(\\\"register(string)\\\", name_)\\n        );\\n        require(success, \\\"FAILED TO REGISTER\\\");\\n    }\\n\\n    // A qualified user initiates a TOPIC/PROPOSAL\\n    function initiate_topic(\\n        string memory title_,\\n        string memory details_,\\n        address implementation_contract_address_,\\n        string memory signature_\\n    ) public {\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"initiate_topic(string,string,address,string)\\\",\\n            title_,\\n            details_,\\n            implementation_contract_address_,\\n            signature_\\n        );\\n        (bool success, ) = logic_contract.delegatecall(data);\\n\\n        require(success, \\\"FAILED TO INITIATE TOPIC\\\");\\n    }\\n\\n    // A qualified user casts their vote(s)\\n    function cast_vote(uint256 topic_id, bool position_) public {\\n        Topic memory topic = Topics[topic_id];\\n        IUTILITY_TOKEN BUNN = IUTILITY_TOKEN(utility_token_address);\\n        uint256 end_time = voting_duration + topic.start_time;\\n\\n        /*sanity checks*/\\n        // check if the Topic is cancelled\\n        require(!topic.cancelled, \\\"INVALID VOTE. TOPIC IS CANCELLED\\\");\\n        // check if sender is a registered user\\n        require(Members[msg.sender].belongs, \\\"NOT A MEMBER\\\");\\n        // check if the voting period has expired\\n        require(end_time > block.timestamp, \\\"VOTING PERIOD HAS ELAPSED\\\");\\n        // ensure that the voter has enough tokens\\n        require(\\n            BUNN.balanceOf(msg.sender) > 0,\\n            \\\"YOU MUST POSSES TOKENs TO BE AN ELIGIBLE VOTER\\\"\\n        );\\n        uint256 voting_power_ = BUNN.balanceOf(msg.sender);\\n\\n        // map users vote against the topic they voted for\\n        // it is supposed to track users who participated in the decision\\n\\n        require(\\n            !ballots[msg.sender][topic_id].voted,\\n            \\\"MEMBERS CAN ONLY CAST A VOTE PER TOPIC\\\"\\n        );\\n        ballots[msg.sender][topic_id] = ballot({\\n            Topic_ID: topic_id,\\n            position: position_,\\n            voted: true,\\n            voting_power: voting_power_\\n        });\\n\\n        // count votes based on voting power\\n        if (ballots[msg.sender][topic_id].position) {\\n            votes[topic_id].for_votes =\\n                votes[topic_id].for_votes +\\n                voting_power_;\\n        } else {\\n            votes[topic_id].against_votes =\\n                votes[topic_id].against_votes +\\n                voting_power_;\\n        }\\n\\n        emit vote_cast(msg.sender, topic.id, position_);\\n    }\\n\\n    // execute/implement a decision or topic is it passed the voting process\\n    function implement_decision(\\n        uint256 topic_id,\\n        bool _override\\n    ) public payable onlyAdmin {\\n        (bool success, ) = logic_contract.delegatecall(\\n            abi.encodeWithSignature(\\n                \\\"implement_decision(uint256,bool)\\\",\\n                topic_id,\\n                _override\\n            )\\n        );\\n        require(success, \\\"FAILED TO IMPLEMENT DECISION\\\");\\n    }\\n\\n    function cancel_Topic(uint256 topic_id) public onlyAdmin {\\n        Topics[topic_id].cancelled = true;\\n    }\\n\\n    /*************************\\n    Section D: Maintenance/Upgrade\\n    *************************/\\n    function UPGRADE(address upgraded_logic_contract) public onlyAdmin {\\n        logic_contract = upgraded_logic_contract;\\n    }\\n\\n    function UPGRADE_UTA(address upgraded_utility_token) public onlyAdmin {\\n        utility_token_address = upgraded_utility_token;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admin[msg.sender].is_admin, \\\"ACCESS DENIED!\\\");\\n        _;\\n    }\\n\\n    function addAdmin(address newAdmin) public onlyAdmin {\\n        if (admin[newAdmin].adders >= admins.length) {\\n            admin[newAdmin].is_admin = true;\\n            admins.push(newAdmin);\\n            admin[newAdmin].adders = admin[newAdmin].adders + 1;\\n        } else {\\n            admin[newAdmin].adders = admin[newAdmin].adders + 1;\\n        }\\n\\n        emit new_Admin(newAdmin);\\n    }\\n\\n    function removeAdmin(address demotedAdmin) public onlyAdmin {\\n        // require(admin[demotedAdmin].removers > (admins.length/2), \\\"\\\");\\n        if (admin[demotedAdmin].removers >= admins.length - 1) {\\n            admin[demotedAdmin].is_admin = false;\\n            admin[demotedAdmin].removers = admin[demotedAdmin].removers + 1;\\n        } else {\\n            admin[demotedAdmin].removers = admin[demotedAdmin].removers + 1;\\n        }\\n\\n        emit remove_Admin(demotedAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xf5e8cc2edfd9193825794da9507ea023a6b57ad483bdeb621f576d9559fa72a2\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/governor_storage.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ncontract governor_storage {\\n    /**************************\\n    Section 0: External resources \\n\\n    *************************/\\n    address public utility_token_address;\\n    uint256 public returned;\\n    address public logic_contract;\\n\\n    /**************************\\n    Section A: State Variables \\n    **************************/\\n\\n    /*\\n    Section A1: defines how members are represented.\\n\\n    ***MORE DELEGATIONS ON THIS LATER***\\n    A member is represented as `Member`.\\n    `Members` maps their address to `Member`.\\n\\n    Members are recorded when they vote, `cast_vote`. \\n    */\\n    struct admin_ {\\n        bool is_admin;\\n        uint256 removers;\\n        uint256 adders;\\n    }\\n    mapping(address => admin_) public admin;\\n\\n    address[] internal admins;\\n\\n    struct Member {\\n        string name; // if necessary\\n        bool belongs;\\n        /* uint delegated_tokens;*/ // if necessary\\n        // other attributes\\n    }\\n    mapping(address => Member) public Members;\\n\\n    /* \\n    Section A2: defines the voting structure.\\n\\n    it features a \\\"ballot box\\\" represented as a mapping called `votes`.\\n    `votes` maps last votes to `ballot`. the last vote is the sum of all votes.\\n    `ballot` maps voters' address to their \\\"ballot paper\\\".\\n\\n    Members can cast their vote(s) by calling the `cast_vote` function.\\n    */\\n    struct ballot {\\n        uint256 Topic_ID;\\n        bool position;\\n        bool voted;\\n        uint256 voting_power;\\n    }\\n    mapping(address => mapping(uint => ballot)) public ballots;\\n\\n    struct vote {\\n        uint256 for_votes;\\n        uint256 against_votes;\\n    }\\n    mapping(uint => vote) public votes;\\n\\n    /*\\n    Section A3a: defines how \\\"Topics\\\" of \\\"Proposals\\\" is represented.\\n\\n    `Topic` defines species the required attributes (self-explanatory) of a topic.\\n    `Topics` is supposed to track \\\"Topics\\\" according to their respective ID(uint).\\n\\n    Qualified members initiate their \\\"Topic\\\" by calling the `initiate_topic` function.\\n     */\\n    struct Topic {\\n        uint256 id;\\n        string title;\\n        address initiator;\\n        string details;\\n        address implementation_contract_address;\\n        string signature;\\n        uint256 start_time;\\n        bool executed;\\n        bool cancelled;\\n    }\\n    mapping(uint256 => Topic) public Topics;\\n\\n    uint256 public counter = 1;\\n}\\n\",\"keccak256\":\"0x8883154ca46108ed01e17c842189b7acab7b5261ecb1b0f4582753b304c7c7e9\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/restrictions.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/* \\n    specifies time-locks and thresholds\\n    */\\ncontract Restrictions {\\n    using Math for uint256;\\n\\n    uint256 public voting_duration = 432000; // 5days\\n    uint256 public implementation_delay = 86400; // 1 day\\n\\n    // uint256 private quorum = 50%;\\n    constructor() {}\\n\\n    /* \\n    here, `target` means the quantity whose threshold is being validated.\\n    `comparison` is the represents the quantity `target` is being validated with.\\n    it returns a boolean if the quorum is high enough.\\n\\n    the quorum I have chosen is 60%.\\n    */\\n    function quorum(\\n        uint256 target,\\n        uint256 comparison\\n    ) public pure returns (bool) {\\n        uint256 comp = comparison.mulDiv(60, 100);\\n        return target >= comp ? true : false;\\n    }\\n}\\n\",\"keccak256\":\"0x713ca8cf0b8fdeab3695926ae4d09e2c05b7bc07e352247315d0d8d8c85f70b2\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility_token-interface.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface IUTILITY_TOKEN {\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc5a78d15c019998fb901c9dd09078579a73825eaf752340a6c5fddf312d687e6\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x6080604052600160095562069780600a5562015180600b553480156200002457600080fd5b5060405162002eb338038062002eb383398181016040528101906200004a919062000198565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001df565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b60008060408385031215620001b257620001b16200012e565b5b6000620001c28582860162000181565b9250506020620001d58582860162000181565b9150509250929050565b612cc480620001ef6000396000f3fe60806040526004361061012a5760003560e01c80635df81330116100ab5780636cb764081161006f5780636cb7640814610403578063704802751461042e5780637d1592f314610457578063a0a67c5814610480578063f2c298be146104ab578063fd0f0166146104d45761012a565b80635df813301461031457806361bc221a1461035257806363a846f81461037d57806367358c96146103bc5780636a87db18146103e75761012a565b806347411226116100f257806347411226146101fe5780634de943201461023b57806354b598ec146102665780635787c126146102a65780635bb6d284146102cf5761012a565b80630e037fd21461012f5780631785f53c146101585780631c8dd214146101815780633153cebc146101aa57806333f794b5146101d5575b600080fd5b34801561013b57600080fd5b5061015660048036038101906101519190611fc5565b610512565b005b34801561016457600080fd5b5061017f600480360381019061017a9190611fc5565b6105e4565b005b34801561018d57600080fd5b506101a860048036038101906101a39190612060565b61089e565b005b3480156101b657600080fd5b506101bf6110a8565b6040516101cc91906120af565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f791906120ca565b6110ae565b005b34801561020a57600080fd5b50610225600480360381019061022091906120f7565b61116f565b6040516102329190612146565b60405180910390f35b34801561024757600080fd5b506102506111a6565b60405161025d9190612170565b60405180910390f35b34801561027257600080fd5b5061028d6004803603810190610288919061218b565b6111cc565b60405161029d94939291906121cb565b60405180910390f35b3480156102b257600080fd5b506102cd60048036038101906102c89190611fc5565b611223565b005b3480156102db57600080fd5b506102f660048036038101906102f191906120ca565b6112f6565b60405161030b999897969594939291906122a0565b60405180910390f35b34801561032057600080fd5b5061033b600480360381019061033691906120ca565b611536565b604051610349929190612342565b60405180910390f35b34801561035e57600080fd5b5061036761155a565b60405161037491906120af565b60405180910390f35b34801561038957600080fd5b506103a4600480360381019061039f9190611fc5565b611560565b6040516103b39392919061236b565b60405180910390f35b3480156103c857600080fd5b506103d1611597565b6040516103de91906120af565b60405180910390f35b61040160048036038101906103fc9190612060565b61159d565b005b34801561040f57600080fd5b5061041861178d565b60405161042591906120af565b60405180910390f35b34801561043a57600080fd5b5061045560048036038101906104509190611fc5565b611793565b005b34801561046357600080fd5b5061047e600480360381019061047991906124d7565b611aa4565b005b34801561048c57600080fd5b50610495611c11565b6040516104a29190612170565b60405180910390f35b3480156104b757600080fd5b506104d260048036038101906104cd9190612592565b611c35565b005b3480156104e057600080fd5b506104fb60048036038101906104f69190611fc5565b611d93565b6040516105099291906125db565b60405180910390f35b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166105a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059890612657565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066a90612657565b60405180910390fd5b600160048054905061068591906126a6565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154106107c2576000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055506001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461077791906126da565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550610858565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461081191906126da565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b8073ffffffffffffffffffffffffffffffffffffffff167f923abef5ea1e37ac38f56a77b8133d215c1d3bcd2e3dd88a6120d34f933f3dde60405160405180910390a250565b60006008600084815260200190815260200160002060405180610120016040529081600082015481526020016001820180546108d99061273d565b80601f01602080910402602001604051908101604052809291908181526020018280546109059061273d565b80156109525780601f1061092757610100808354040283529160200191610952565b820191906000526020600020905b81548152906001019060200180831161093557829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180546109c19061273d565b80601f01602080910402602001604051908101604052809291908181526020018280546109ed9061273d565b8015610a3a5780601f10610a0f57610100808354040283529160200191610a3a565b820191906000526020600020905b815481529060010190602001808311610a1d57829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054610aa99061273d565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad59061273d565b8015610b225780601f10610af757610100808354040283529160200191610b22565b820191906000526020600020905b815481529060010190602001808311610b0557829003601f168201915b50505050508152602001600682015481526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581525050905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260c00151600a54610ba791906126da565b905082610100015115610bef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be6906127ba565b60405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16610c7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7590612826565b60405180910390fd5b428111610cc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb790612892565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610cfb9190612170565b602060405180830381865afa158015610d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3c91906128c7565b11610d7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7390612966565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610db79190612170565b602060405180830381865afa158015610dd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df891906128c7565b9050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060010160019054906101000a900460ff1615610e9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e92906129f8565b60405180910390fd5b6040518060800160405280878152602001861515815260200160011515815260200182815250600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff02191690831515021790555060608201518160020155905050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060010160009054906101000a900460ff161561100f57806007600088815260200190815260200160002060000154610ff091906126da565b600760008881526020019081526020016000206000018190555061104c565b80600760008881526020019081526020016000206001015461103191906126da565b60076000888152602001908152602001600020600101819055505b3373ffffffffffffffffffffffffffffffffffffffff167f4f7ff1c79e536d7fef60ccb53beb6009e08841ffcba10e515e076f4cbdd9e320856000015187604051611098929190612a18565b60405180910390a2505050505050565b600a5481565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1661113d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113490612657565b60405180910390fd5b60016008600083815260200190815260200160002060070160016101000a81548160ff02191690831515021790555050565b600080611189603c606485611e4c9092919063ffffffff16565b90508084101561119a57600061119d565b60015b91505092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6006602052816000526040600020602052806000526040600020600091509150508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060020154905084565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166112b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a990612657565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600860205280600052604060002060009150905080600001549080600101805461131f9061273d565b80601f016020809104026020016040519081016040528092919081815260200182805461134b9061273d565b80156113985780601f1061136d57610100808354040283529160200191611398565b820191906000526020600020905b81548152906001019060200180831161137b57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030180546113d39061273d565b80601f01602080910402602001604051908101604052809291908181526020018280546113ff9061273d565b801561144c5780601f106114215761010080835404028352916020019161144c565b820191906000526020600020905b81548152906001019060200180831161142f57829003601f168201915b5050505050908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050180546114879061273d565b80601f01602080910402602001604051908101604052809291908181526020018280546114b39061273d565b80156115005780601f106114d557610100808354040283529160200191611500565b820191906000526020600020905b8154815290600101906020018083116114e357829003601f168201915b5050505050908060060154908060070160009054906101000a900460ff16908060070160019054906101000a900460ff16905089565b60076020528060005260406000206000915090508060000154908060010154905082565b60095481565b60036020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154905083565b600b5481565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1661162c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162390612657565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16838360405160240161167a929190612a18565b6040516020818303038152906040527f6a87db18000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516117049190612a88565b600060405180830381855af49150503d806000811461173f576040519150601f19603f3d011682016040523d82523d6000602084013e611744565b606091505b5050905080611788576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177f90612aeb565b60405180910390fd5b505050565b60015481565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16611822576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181990612657565b60405180910390fd5b600480549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154106119c8576001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055506004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015461197d91906126da565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550611a5e565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154611a1791906126da565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055505b8073ffffffffffffffffffffffffffffffffffffffff167fe0c21bf57df59cfc5e2067c75dbfd51a39f17533352ce1cf3a6c713c897a6c0c60405160405180910390a250565b600084848484604051602401611abd9493929190612b0b565b6040516020818303038152906040527f7d1592f3000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051611b859190612a88565b600060405180830381855af49150503d8060008114611bc0576040519150601f19603f3d011682016040523d82523d6000602084013e611bc5565b606091505b5050905080611c09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0090612bb1565b60405180910390fd5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051602401611c819190612bd1565b6040516020818303038152906040527ff2c298be000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611d0b9190612a88565b600060405180830381855af49150503d8060008114611d46576040519150601f19603f3d011682016040523d82523d6000602084013e611d4b565b606091505b5050905080611d8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8690612c3f565b60405180910390fd5b5050565b6005602052806000526040600020600091509050806000018054611db69061273d565b80601f0160208091040260200160405190810160405280929190818152602001828054611de29061273d565b8015611e2f5780601f10611e0457610100808354040283529160200191611e2f565b820191906000526020600020905b815481529060010190602001808311611e1257829003601f168201915b5050505050908060010160009054906101000a900460ff16905082565b6000808385029050600080198587098281108382030391505060008103611e8757838281611e7d57611e7c612c5f565b5b0492505050611f4c565b808411611ec0576040517f227bc15300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600084868809905082811182039150808303925060008560000386169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f9282611f67565b9050919050565b611fa281611f87565b8114611fad57600080fd5b50565b600081359050611fbf81611f99565b92915050565b600060208284031215611fdb57611fda611f5d565b5b6000611fe984828501611fb0565b91505092915050565b6000819050919050565b61200581611ff2565b811461201057600080fd5b50565b60008135905061202281611ffc565b92915050565b60008115159050919050565b61203d81612028565b811461204857600080fd5b50565b60008135905061205a81612034565b92915050565b6000806040838503121561207757612076611f5d565b5b600061208585828601612013565b92505060206120968582860161204b565b9150509250929050565b6120a981611ff2565b82525050565b60006020820190506120c460008301846120a0565b92915050565b6000602082840312156120e0576120df611f5d565b5b60006120ee84828501612013565b91505092915050565b6000806040838503121561210e5761210d611f5d565b5b600061211c85828601612013565b925050602061212d85828601612013565b9150509250929050565b61214081612028565b82525050565b600060208201905061215b6000830184612137565b92915050565b61216a81611f87565b82525050565b60006020820190506121856000830184612161565b92915050565b600080604083850312156121a2576121a1611f5d565b5b60006121b085828601611fb0565b92505060206121c185828601612013565b9150509250929050565b60006080820190506121e060008301876120a0565b6121ed6020830186612137565b6121fa6040830185612137565b61220760608301846120a0565b95945050505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561224a57808201518184015260208101905061222f565b60008484015250505050565b6000601f19601f8301169050919050565b600061227282612210565b61227c818561221b565b935061228c81856020860161222c565b61229581612256565b840191505092915050565b6000610120820190506122b6600083018c6120a0565b81810360208301526122c8818b612267565b90506122d7604083018a612161565b81810360608301526122e98189612267565b90506122f86080830188612161565b81810360a083015261230a8187612267565b905061231960c08301866120a0565b61232660e0830185612137565b612334610100830184612137565b9a9950505050505050505050565b600060408201905061235760008301856120a0565b61236460208301846120a0565b9392505050565b60006060820190506123806000830186612137565b61238d60208301856120a0565b61239a60408301846120a0565b949350505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123e482612256565b810181811067ffffffffffffffff82111715612403576124026123ac565b5b80604052505050565b6000612416611f53565b905061242282826123db565b919050565b600067ffffffffffffffff821115612442576124416123ac565b5b61244b82612256565b9050602081019050919050565b82818337600083830152505050565b600061247a61247584612427565b61240c565b905082815260208101848484011115612496576124956123a7565b5b6124a1848285612458565b509392505050565b600082601f8301126124be576124bd6123a2565b5b81356124ce848260208601612467565b91505092915050565b600080600080608085870312156124f1576124f0611f5d565b5b600085013567ffffffffffffffff81111561250f5761250e611f62565b5b61251b878288016124a9565b945050602085013567ffffffffffffffff81111561253c5761253b611f62565b5b612548878288016124a9565b935050604061255987828801611fb0565b925050606085013567ffffffffffffffff81111561257a57612579611f62565b5b612586878288016124a9565b91505092959194509250565b6000602082840312156125a8576125a7611f5d565b5b600082013567ffffffffffffffff8111156125c6576125c5611f62565b5b6125d2848285016124a9565b91505092915050565b600060408201905081810360008301526125f58185612267565b90506126046020830184612137565b9392505050565b7f4143434553532044454e49454421000000000000000000000000000000000000600082015250565b6000612641600e8361221b565b915061264c8261260b565b602082019050919050565b6000602082019050818103600083015261267081612634565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126b182611ff2565b91506126bc83611ff2565b92508282039050818111156126d4576126d3612677565b5b92915050565b60006126e582611ff2565b91506126f083611ff2565b925082820190508082111561270857612707612677565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061275557607f821691505b6020821081036127685761276761270e565b5b50919050565b7f494e56414c494420564f54452e20544f5049432049532043414e43454c4c4544600082015250565b60006127a460208361221b565b91506127af8261276e565b602082019050919050565b600060208201905081810360008301526127d381612797565b9050919050565b7f4e4f542041204d454d4245520000000000000000000000000000000000000000600082015250565b6000612810600c8361221b565b915061281b826127da565b602082019050919050565b6000602082019050818103600083015261283f81612803565b9050919050565b7f564f54494e4720504552494f442048415320454c415053454400000000000000600082015250565b600061287c60198361221b565b915061288782612846565b602082019050919050565b600060208201905081810360008301526128ab8161286f565b9050919050565b6000815190506128c181611ffc565b92915050565b6000602082840312156128dd576128dc611f5d565b5b60006128eb848285016128b2565b91505092915050565b7f594f55204d55535420504f5353455320544f4b454e7320544f20424520414e2060008201527f454c494749424c4520564f544552000000000000000000000000000000000000602082015250565b6000612950602e8361221b565b915061295b826128f4565b604082019050919050565b6000602082019050818103600083015261297f81612943565b9050919050565b7f4d454d424552532043414e204f4e4c592043415354204120564f54452050455260008201527f20544f5049430000000000000000000000000000000000000000000000000000602082015250565b60006129e260268361221b565b91506129ed82612986565b604082019050919050565b60006020820190508181036000830152612a11816129d5565b9050919050565b6000604082019050612a2d60008301856120a0565b612a3a6020830184612137565b9392505050565b600081519050919050565b600081905092915050565b6000612a6282612a41565b612a6c8185612a4c565b9350612a7c81856020860161222c565b80840191505092915050565b6000612a948284612a57565b915081905092915050565b7f4641494c454420544f20494d504c454d454e54204445434953494f4e00000000600082015250565b6000612ad5601c8361221b565b9150612ae082612a9f565b602082019050919050565b60006020820190508181036000830152612b0481612ac8565b9050919050565b60006080820190508181036000830152612b258187612267565b90508181036020830152612b398186612267565b9050612b486040830185612161565b8181036060830152612b5a8184612267565b905095945050505050565b7f4641494c454420544f20494e49544941544520544f5049430000000000000000600082015250565b6000612b9b60188361221b565b9150612ba682612b65565b602082019050919050565b60006020820190508181036000830152612bca81612b8e565b9050919050565b60006020820190508181036000830152612beb8184612267565b905092915050565b7f4641494c454420544f2052454749535445520000000000000000000000000000600082015250565b6000612c2960128361221b565b9150612c3482612bf3565b602082019050919050565b60006020820190508181036000830152612c5881612c1c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220b811485bc136dfba14fb4330b548c3c042d19b79bf7c3c9315d8855bd2dc0f2764736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c80635df81330116100ab5780636cb764081161006f5780636cb7640814610403578063704802751461042e5780637d1592f314610457578063a0a67c5814610480578063f2c298be146104ab578063fd0f0166146104d45761012a565b80635df813301461031457806361bc221a1461035257806363a846f81461037d57806367358c96146103bc5780636a87db18146103e75761012a565b806347411226116100f257806347411226146101fe5780634de943201461023b57806354b598ec146102665780635787c126146102a65780635bb6d284146102cf5761012a565b80630e037fd21461012f5780631785f53c146101585780631c8dd214146101815780633153cebc146101aa57806333f794b5146101d5575b600080fd5b34801561013b57600080fd5b5061015660048036038101906101519190611fc5565b610512565b005b34801561016457600080fd5b5061017f600480360381019061017a9190611fc5565b6105e4565b005b34801561018d57600080fd5b506101a860048036038101906101a39190612060565b61089e565b005b3480156101b657600080fd5b506101bf6110a8565b6040516101cc91906120af565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f791906120ca565b6110ae565b005b34801561020a57600080fd5b50610225600480360381019061022091906120f7565b61116f565b6040516102329190612146565b60405180910390f35b34801561024757600080fd5b506102506111a6565b60405161025d9190612170565b60405180910390f35b34801561027257600080fd5b5061028d6004803603810190610288919061218b565b6111cc565b60405161029d94939291906121cb565b60405180910390f35b3480156102b257600080fd5b506102cd60048036038101906102c89190611fc5565b611223565b005b3480156102db57600080fd5b506102f660048036038101906102f191906120ca565b6112f6565b60405161030b999897969594939291906122a0565b60405180910390f35b34801561032057600080fd5b5061033b600480360381019061033691906120ca565b611536565b604051610349929190612342565b60405180910390f35b34801561035e57600080fd5b5061036761155a565b60405161037491906120af565b60405180910390f35b34801561038957600080fd5b506103a4600480360381019061039f9190611fc5565b611560565b6040516103b39392919061236b565b60405180910390f35b3480156103c857600080fd5b506103d1611597565b6040516103de91906120af565b60405180910390f35b61040160048036038101906103fc9190612060565b61159d565b005b34801561040f57600080fd5b5061041861178d565b60405161042591906120af565b60405180910390f35b34801561043a57600080fd5b5061045560048036038101906104509190611fc5565b611793565b005b34801561046357600080fd5b5061047e600480360381019061047991906124d7565b611aa4565b005b34801561048c57600080fd5b50610495611c11565b6040516104a29190612170565b60405180910390f35b3480156104b757600080fd5b506104d260048036038101906104cd9190612592565b611c35565b005b3480156104e057600080fd5b506104fb60048036038101906104f69190611fc5565b611d93565b6040516105099291906125db565b60405180910390f35b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166105a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059890612657565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066a90612657565b60405180910390fd5b600160048054905061068591906126a6565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154106107c2576000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055506001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461077791906126da565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550610858565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461081191906126da565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b8073ffffffffffffffffffffffffffffffffffffffff167f923abef5ea1e37ac38f56a77b8133d215c1d3bcd2e3dd88a6120d34f933f3dde60405160405180910390a250565b60006008600084815260200190815260200160002060405180610120016040529081600082015481526020016001820180546108d99061273d565b80601f01602080910402602001604051908101604052809291908181526020018280546109059061273d565b80156109525780601f1061092757610100808354040283529160200191610952565b820191906000526020600020905b81548152906001019060200180831161093557829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180546109c19061273d565b80601f01602080910402602001604051908101604052809291908181526020018280546109ed9061273d565b8015610a3a5780601f10610a0f57610100808354040283529160200191610a3a565b820191906000526020600020905b815481529060010190602001808311610a1d57829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054610aa99061273d565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad59061273d565b8015610b225780601f10610af757610100808354040283529160200191610b22565b820191906000526020600020905b815481529060010190602001808311610b0557829003601f168201915b50505050508152602001600682015481526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581525050905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260c00151600a54610ba791906126da565b905082610100015115610bef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be6906127ba565b60405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16610c7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7590612826565b60405180910390fd5b428111610cc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb790612892565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610cfb9190612170565b602060405180830381865afa158015610d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3c91906128c7565b11610d7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7390612966565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610db79190612170565b602060405180830381865afa158015610dd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df891906128c7565b9050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060010160019054906101000a900460ff1615610e9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e92906129f8565b60405180910390fd5b6040518060800160405280878152602001861515815260200160011515815260200182815250600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff02191690831515021790555060608201518160020155905050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060010160009054906101000a900460ff161561100f57806007600088815260200190815260200160002060000154610ff091906126da565b600760008881526020019081526020016000206000018190555061104c565b80600760008881526020019081526020016000206001015461103191906126da565b60076000888152602001908152602001600020600101819055505b3373ffffffffffffffffffffffffffffffffffffffff167f4f7ff1c79e536d7fef60ccb53beb6009e08841ffcba10e515e076f4cbdd9e320856000015187604051611098929190612a18565b60405180910390a2505050505050565b600a5481565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1661113d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113490612657565b60405180910390fd5b60016008600083815260200190815260200160002060070160016101000a81548160ff02191690831515021790555050565b600080611189603c606485611e4c9092919063ffffffff16565b90508084101561119a57600061119d565b60015b91505092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6006602052816000526040600020602052806000526040600020600091509150508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060020154905084565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166112b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a990612657565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600860205280600052604060002060009150905080600001549080600101805461131f9061273d565b80601f016020809104026020016040519081016040528092919081815260200182805461134b9061273d565b80156113985780601f1061136d57610100808354040283529160200191611398565b820191906000526020600020905b81548152906001019060200180831161137b57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030180546113d39061273d565b80601f01602080910402602001604051908101604052809291908181526020018280546113ff9061273d565b801561144c5780601f106114215761010080835404028352916020019161144c565b820191906000526020600020905b81548152906001019060200180831161142f57829003601f168201915b5050505050908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050180546114879061273d565b80601f01602080910402602001604051908101604052809291908181526020018280546114b39061273d565b80156115005780601f106114d557610100808354040283529160200191611500565b820191906000526020600020905b8154815290600101906020018083116114e357829003601f168201915b5050505050908060060154908060070160009054906101000a900460ff16908060070160019054906101000a900460ff16905089565b60076020528060005260406000206000915090508060000154908060010154905082565b60095481565b60036020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154905083565b600b5481565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1661162c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162390612657565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16838360405160240161167a929190612a18565b6040516020818303038152906040527f6a87db18000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516117049190612a88565b600060405180830381855af49150503d806000811461173f576040519150601f19603f3d011682016040523d82523d6000602084013e611744565b606091505b5050905080611788576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177f90612aeb565b60405180910390fd5b505050565b60015481565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16611822576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181990612657565b60405180910390fd5b600480549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154106119c8576001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055506004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015461197d91906126da565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550611a5e565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154611a1791906126da565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055505b8073ffffffffffffffffffffffffffffffffffffffff167fe0c21bf57df59cfc5e2067c75dbfd51a39f17533352ce1cf3a6c713c897a6c0c60405160405180910390a250565b600084848484604051602401611abd9493929190612b0b565b6040516020818303038152906040527f7d1592f3000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051611b859190612a88565b600060405180830381855af49150503d8060008114611bc0576040519150601f19603f3d011682016040523d82523d6000602084013e611bc5565b606091505b5050905080611c09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0090612bb1565b60405180910390fd5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051602401611c819190612bd1565b6040516020818303038152906040527ff2c298be000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611d0b9190612a88565b600060405180830381855af49150503d8060008114611d46576040519150601f19603f3d011682016040523d82523d6000602084013e611d4b565b606091505b5050905080611d8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8690612c3f565b60405180910390fd5b5050565b6005602052806000526040600020600091509050806000018054611db69061273d565b80601f0160208091040260200160405190810160405280929190818152602001828054611de29061273d565b8015611e2f5780601f10611e0457610100808354040283529160200191611e2f565b820191906000526020600020905b815481529060010190602001808311611e1257829003601f168201915b5050505050908060010160009054906101000a900460ff16905082565b6000808385029050600080198587098281108382030391505060008103611e8757838281611e7d57611e7c612c5f565b5b0492505050611f4c565b808411611ec0576040517f227bc15300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600084868809905082811182039150808303925060008560000386169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f9282611f67565b9050919050565b611fa281611f87565b8114611fad57600080fd5b50565b600081359050611fbf81611f99565b92915050565b600060208284031215611fdb57611fda611f5d565b5b6000611fe984828501611fb0565b91505092915050565b6000819050919050565b61200581611ff2565b811461201057600080fd5b50565b60008135905061202281611ffc565b92915050565b60008115159050919050565b61203d81612028565b811461204857600080fd5b50565b60008135905061205a81612034565b92915050565b6000806040838503121561207757612076611f5d565b5b600061208585828601612013565b92505060206120968582860161204b565b9150509250929050565b6120a981611ff2565b82525050565b60006020820190506120c460008301846120a0565b92915050565b6000602082840312156120e0576120df611f5d565b5b60006120ee84828501612013565b91505092915050565b6000806040838503121561210e5761210d611f5d565b5b600061211c85828601612013565b925050602061212d85828601612013565b9150509250929050565b61214081612028565b82525050565b600060208201905061215b6000830184612137565b92915050565b61216a81611f87565b82525050565b60006020820190506121856000830184612161565b92915050565b600080604083850312156121a2576121a1611f5d565b5b60006121b085828601611fb0565b92505060206121c185828601612013565b9150509250929050565b60006080820190506121e060008301876120a0565b6121ed6020830186612137565b6121fa6040830185612137565b61220760608301846120a0565b95945050505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561224a57808201518184015260208101905061222f565b60008484015250505050565b6000601f19601f8301169050919050565b600061227282612210565b61227c818561221b565b935061228c81856020860161222c565b61229581612256565b840191505092915050565b6000610120820190506122b6600083018c6120a0565b81810360208301526122c8818b612267565b90506122d7604083018a612161565b81810360608301526122e98189612267565b90506122f86080830188612161565b81810360a083015261230a8187612267565b905061231960c08301866120a0565b61232660e0830185612137565b612334610100830184612137565b9a9950505050505050505050565b600060408201905061235760008301856120a0565b61236460208301846120a0565b9392505050565b60006060820190506123806000830186612137565b61238d60208301856120a0565b61239a60408301846120a0565b949350505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123e482612256565b810181811067ffffffffffffffff82111715612403576124026123ac565b5b80604052505050565b6000612416611f53565b905061242282826123db565b919050565b600067ffffffffffffffff821115612442576124416123ac565b5b61244b82612256565b9050602081019050919050565b82818337600083830152505050565b600061247a61247584612427565b61240c565b905082815260208101848484011115612496576124956123a7565b5b6124a1848285612458565b509392505050565b600082601f8301126124be576124bd6123a2565b5b81356124ce848260208601612467565b91505092915050565b600080600080608085870312156124f1576124f0611f5d565b5b600085013567ffffffffffffffff81111561250f5761250e611f62565b5b61251b878288016124a9565b945050602085013567ffffffffffffffff81111561253c5761253b611f62565b5b612548878288016124a9565b935050604061255987828801611fb0565b925050606085013567ffffffffffffffff81111561257a57612579611f62565b5b612586878288016124a9565b91505092959194509250565b6000602082840312156125a8576125a7611f5d565b5b600082013567ffffffffffffffff8111156125c6576125c5611f62565b5b6125d2848285016124a9565b91505092915050565b600060408201905081810360008301526125f58185612267565b90506126046020830184612137565b9392505050565b7f4143434553532044454e49454421000000000000000000000000000000000000600082015250565b6000612641600e8361221b565b915061264c8261260b565b602082019050919050565b6000602082019050818103600083015261267081612634565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126b182611ff2565b91506126bc83611ff2565b92508282039050818111156126d4576126d3612677565b5b92915050565b60006126e582611ff2565b91506126f083611ff2565b925082820190508082111561270857612707612677565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061275557607f821691505b6020821081036127685761276761270e565b5b50919050565b7f494e56414c494420564f54452e20544f5049432049532043414e43454c4c4544600082015250565b60006127a460208361221b565b91506127af8261276e565b602082019050919050565b600060208201905081810360008301526127d381612797565b9050919050565b7f4e4f542041204d454d4245520000000000000000000000000000000000000000600082015250565b6000612810600c8361221b565b915061281b826127da565b602082019050919050565b6000602082019050818103600083015261283f81612803565b9050919050565b7f564f54494e4720504552494f442048415320454c415053454400000000000000600082015250565b600061287c60198361221b565b915061288782612846565b602082019050919050565b600060208201905081810360008301526128ab8161286f565b9050919050565b6000815190506128c181611ffc565b92915050565b6000602082840312156128dd576128dc611f5d565b5b60006128eb848285016128b2565b91505092915050565b7f594f55204d55535420504f5353455320544f4b454e7320544f20424520414e2060008201527f454c494749424c4520564f544552000000000000000000000000000000000000602082015250565b6000612950602e8361221b565b915061295b826128f4565b604082019050919050565b6000602082019050818103600083015261297f81612943565b9050919050565b7f4d454d424552532043414e204f4e4c592043415354204120564f54452050455260008201527f20544f5049430000000000000000000000000000000000000000000000000000602082015250565b60006129e260268361221b565b91506129ed82612986565b604082019050919050565b60006020820190508181036000830152612a11816129d5565b9050919050565b6000604082019050612a2d60008301856120a0565b612a3a6020830184612137565b9392505050565b600081519050919050565b600081905092915050565b6000612a6282612a41565b612a6c8185612a4c565b9350612a7c81856020860161222c565b80840191505092915050565b6000612a948284612a57565b915081905092915050565b7f4641494c454420544f20494d504c454d454e54204445434953494f4e00000000600082015250565b6000612ad5601c8361221b565b9150612ae082612a9f565b602082019050919050565b60006020820190508181036000830152612b0481612ac8565b9050919050565b60006080820190508181036000830152612b258187612267565b90508181036020830152612b398186612267565b9050612b486040830185612161565b8181036060830152612b5a8184612267565b905095945050505050565b7f4641494c454420544f20494e49544941544520544f5049430000000000000000600082015250565b6000612b9b60188361221b565b9150612ba682612b65565b602082019050919050565b60006020820190508181036000830152612bca81612b8e565b9050919050565b60006020820190508181036000830152612beb8184612267565b905092915050565b7f4641494c454420544f2052454749535445520000000000000000000000000000600082015250565b6000612c2960128361221b565b9150612c3482612bf3565b602082019050919050565b60006020820190508181036000830152612c5881612c1c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220b811485bc136dfba14fb4330b548c3c042d19b79bf7c3c9315d8855bd2dc0f2764736f6c63430008140033",
  "devdoc": {
    "errors": {
      "MathOverflowedMulDiv()": [
        {
          "details": "Muldiv operation overflow."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2807,
        "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
        "label": "utility_token_address",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2809,
        "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
        "label": "returned",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2811,
        "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
        "label": "logic_contract",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2823,
        "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
        "label": "admin",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(admin_)2818_storage)"
      },
      {
        "astId": 2826,
        "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
        "label": "admins",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2836,
        "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
        "label": "Members",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Member)2831_storage)"
      },
      {
        "astId": 2852,
        "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
        "label": "ballots",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(ballot)2845_storage))"
      },
      {
        "astId": 2862,
        "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
        "label": "votes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(vote)2857_storage)"
      },
      {
        "astId": 2886,
        "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
        "label": "Topics",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Topic)2881_storage)"
      },
      {
        "astId": 2889,
        "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
        "label": "counter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2899,
        "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
        "label": "voting_duration",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2902,
        "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
        "label": "implementation_delay",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(ballot)2845_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct governor_storage.ballot))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ballot)2845_storage)"
      },
      "t_mapping(t_address,t_struct(Member)2831_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct governor_storage.Member)",
        "numberOfBytes": "32",
        "value": "t_struct(Member)2831_storage"
      },
      "t_mapping(t_address,t_struct(admin_)2818_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct governor_storage.admin_)",
        "numberOfBytes": "32",
        "value": "t_struct(admin_)2818_storage"
      },
      "t_mapping(t_uint256,t_struct(Topic)2881_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct governor_storage.Topic)",
        "numberOfBytes": "32",
        "value": "t_struct(Topic)2881_storage"
      },
      "t_mapping(t_uint256,t_struct(ballot)2845_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct governor_storage.ballot)",
        "numberOfBytes": "32",
        "value": "t_struct(ballot)2845_storage"
      },
      "t_mapping(t_uint256,t_struct(vote)2857_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct governor_storage.vote)",
        "numberOfBytes": "32",
        "value": "t_struct(vote)2857_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Member)2831_storage": {
        "encoding": "inplace",
        "label": "struct governor_storage.Member",
        "members": [
          {
            "astId": 2828,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2830,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "belongs",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Topic)2881_storage": {
        "encoding": "inplace",
        "label": "struct governor_storage.Topic",
        "members": [
          {
            "astId": 2864,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2866,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2868,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "initiator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2870,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "details",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2872,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "implementation_contract_address",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2874,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "signature",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 2876,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "start_time",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2878,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "executed",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 2880,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "cancelled",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(admin_)2818_storage": {
        "encoding": "inplace",
        "label": "struct governor_storage.admin_",
        "members": [
          {
            "astId": 2813,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "is_admin",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2815,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "removers",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2817,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "adders",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ballot)2845_storage": {
        "encoding": "inplace",
        "label": "struct governor_storage.ballot",
        "members": [
          {
            "astId": 2838,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "Topic_ID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2840,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "position",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2842,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "voted",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2844,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "voting_power",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(vote)2857_storage": {
        "encoding": "inplace",
        "label": "struct governor_storage.vote",
        "members": [
          {
            "astId": 2854,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "for_votes",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2856,
            "contract": "contracts/BUNN_Governor_Proxy.sol:BUNN_GOVERNOR",
            "label": "against_votes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}